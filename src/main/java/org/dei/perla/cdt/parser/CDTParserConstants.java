/* Generated By:JavaCC: Do not edit this line. CDTParserConstants.java */
package org.dei.perla.cdt.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface CDTParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int KEYWORD_CREATE = 8;
  /** RegularExpression Id. */
  int KEYWORD_DIMENSION = 9;
  /** RegularExpression Id. */
  int KEYWORD_REMOVE = 10;
  /** RegularExpression Id. */
  int KEYWORD_CONCEPT = 11;
  /** RegularExpression Id. */
  int KEYWORD_WHEN = 12;
  /** RegularExpression Id. */
  int EXCLUDES = 13;
  /** RegularExpression Id. */
  int KEYWORD_CHILD = 14;
  /** RegularExpression Id. */
  int KEYWORD_OF = 15;
  /** RegularExpression Id. */
  int KEYWORD_ADD = 16;
  /** RegularExpression Id. */
  int KEYWORD_ATTRIBUTE = 17;
  /** RegularExpression Id. */
  int KEYWORD_DOLLAR = 18;
  /** RegularExpression Id. */
  int KEYWORD_EVALUATED = 19;
  /** RegularExpression Id. */
  int KEYWORD_ON = 20;
  /** RegularExpression Id. */
  int KEYWORD_WITH = 21;
  /** RegularExpression Id. */
  int KEYWORD_ENABLE = 22;
  /** RegularExpression Id. */
  int KEYWORD_DISABLE = 23;
  /** RegularExpression Id. */
  int KEYWORD_COMPONENT = 24;
  /** RegularExpression Id. */
  int KEYWORD_REFRESH = 25;
  /** RegularExpression Id. */
  int KEYWORD_COLON = 26;
  /** RegularExpression Id. */
  int KEYWORD_IS = 27;
  /** RegularExpression Id. */
  int KEYWORD_BETWEEN = 28;
  /** RegularExpression Id. */
  int KEYWORD_LIKE = 29;
  /** RegularExpression Id. */
  int OPERATOR_MULTIPLY = 30;
  /** RegularExpression Id. */
  int OPERATOR_DIVIDE = 31;
  /** RegularExpression Id. */
  int OPERATOR_MODULO = 32;
  /** RegularExpression Id. */
  int OPERATOR_PLUS = 33;
  /** RegularExpression Id. */
  int OPERATOR_MINUS = 34;
  /** RegularExpression Id. */
  int OPERATOR_NOT = 35;
  /** RegularExpression Id. */
  int OPERATOR_XOR = 36;
  /** RegularExpression Id. */
  int OPERATOR_AND = 37;
  /** RegularExpression Id. */
  int OPERATOR_OR = 38;
  /** RegularExpression Id. */
  int OPERATOR_BITWISE_NOT = 39;
  /** RegularExpression Id. */
  int OPERATOR_BITWISE_LSH = 40;
  /** RegularExpression Id. */
  int OPERATOR_BITWISE_RSH = 41;
  /** RegularExpression Id. */
  int OPERATOR_BITWISE_XOR = 42;
  /** RegularExpression Id. */
  int OPERATOR_BITWISE_AND = 43;
  /** RegularExpression Id. */
  int OPERATOR_BITWISE_OR = 44;
  /** RegularExpression Id. */
  int OPERATOR_GREATER = 45;
  /** RegularExpression Id. */
  int OPERATOR_LESS = 46;
  /** RegularExpression Id. */
  int OPERATOR_GREATER_EQUAL = 47;
  /** RegularExpression Id. */
  int OPERATOR_LESS_EQUAL = 48;
  /** RegularExpression Id. */
  int OPERATOR_EQUAL = 49;
  /** RegularExpression Id. */
  int OPERATOR_NOT_EQUAL = 50;
  /** RegularExpression Id. */
  int FUNCTION_COUNT = 51;
  /** RegularExpression Id. */
  int FUNCTION_AVG = 52;
  /** RegularExpression Id. */
  int FUNCTION_MAX = 53;
  /** RegularExpression Id. */
  int FUNCTION_MIN = 54;
  /** RegularExpression Id. */
  int FUNCTION_SUM = 55;
  /** RegularExpression Id. */
  int TIMEUNIT_S = 56;
  /** RegularExpression Id. */
  int TIMEUNIT_M = 57;
  /** RegularExpression Id. */
  int TIMEUNIT_H = 58;
  /** RegularExpression Id. */
  int TIMEUNIT_MS = 59;
  /** RegularExpression Id. */
  int TIMEUNIT_D = 60;
  /** RegularExpression Id. */
  int TYPE_ID = 61;
  /** RegularExpression Id. */
  int TYPE_TIMESTAMP = 62;
  /** RegularExpression Id. */
  int TYPE_BOOLEAN = 63;
  /** RegularExpression Id. */
  int TYPE_INTEGER = 64;
  /** RegularExpression Id. */
  int TYPE_FLOAT = 65;
  /** RegularExpression Id. */
  int TYPE_STRING = 66;
  /** RegularExpression Id. */
  int TYPE_ANY = 67;
  /** RegularExpression Id. */
  int KEYWORD_AS = 68;
  /** RegularExpression Id. */
  int CONSTANT_NULL = 69;
  /** RegularExpression Id. */
  int CONSTANT_BOOLEAN_TRUE = 70;
  /** RegularExpression Id. */
  int CONSTANT_BOOLEAN_FALSE = 71;
  /** RegularExpression Id. */
  int CONSTANT_BOOLEAN_UNKNOWN = 72;
  /** RegularExpression Id. */
  int CONSTANT_INTEGER_10 = 73;
  /** RegularExpression Id. */
  int CONSTANT_INTEGER_16 = 74;
  /** RegularExpression Id. */
  int CONSTANT_FLOAT = 75;
  /** RegularExpression Id. */
  int CONSTANT_SINGLE_QUOTED_STRING_START = 76;
  /** RegularExpression Id. */
  int CONSTANT_DOUBLE_QUOTED_STRING_START = 77;
  /** RegularExpression Id. */
  int CONSTANT_SINGLE_QUOTED_STRING_VALUE = 78;
  /** RegularExpression Id. */
  int CONSTANT_DOUBLE_QUOTED_STRING_VALUE = 79;
  /** RegularExpression Id. */
  int CONSTANT_SINGLE_QUOTED_STRING_END = 80;
  /** RegularExpression Id. */
  int CONSTANT_DOUBLE_QUOTED_STRING_END = 81;
  /** RegularExpression Id. */
  int DIGIT = 82;
  /** RegularExpression Id. */
  int LITERAL = 83;
  /** RegularExpression Id. */
  int UNDERSCORE = 84;
  /** RegularExpression Id. */
  int HEXADECIMAL = 85;
  /** RegularExpression Id. */
  int IDENTIFIER = 86;
  /** RegularExpression Id. */
  int METHOD = 87;
  /** RegularExpression Id. */
  int METHOD_PACKAGE = 88;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int COMMENT = 1;
  /** Lexical state. */
  int NON_SINGLE_QUOTED_STRING = 2;
  /** Lexical state. */
  int NON_DOUBLE_QUOTED_STRING = 3;
  /** Lexical state. */
  int NON_SINGLE_QUOTED_STRING_END = 4;
  /** Lexical state. */
  int NON_DOUBLE_QUOTED_STRING_END = 5;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"/*\"",
    "<token of kind 6>",
    "\"*/\"",
    "\"CREATE\"",
    "\"DIMENSION\"",
    "\"REMOVE\"",
    "\"CONCEPT\"",
    "\"WHEN\"",
    "\"EXCLUDES\"",
    "\"CHILD\"",
    "\"OF\"",
    "\"ADD\"",
    "\"ATTRIBUTE\"",
    "\"$\"",
    "\"EVALUATED\"",
    "\"ON\"",
    "\"WITH\"",
    "\"ENABLE\"",
    "\"DISABLE\"",
    "\"COMPONENT\"",
    "\"REFRESH\"",
    "\":\"",
    "\"IS\"",
    "\"BETWEEN\"",
    "\"LIKE\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"+\"",
    "\"-\"",
    "\"NOT\"",
    "\"XOR\"",
    "\"AND\"",
    "\"OR\"",
    "\"~\"",
    "\"<<\"",
    "\">>\"",
    "\"^\"",
    "\"&\"",
    "\"|\"",
    "\">\"",
    "\"<\"",
    "\">=\"",
    "\"<=\"",
    "\"=\"",
    "<OPERATOR_NOT_EQUAL>",
    "\"COUNT\"",
    "\"AVG\"",
    "\"MAX\"",
    "\"MIN\"",
    "\"SUM\"",
    "<TIMEUNIT_S>",
    "<TIMEUNIT_M>",
    "<TIMEUNIT_H>",
    "<TIMEUNIT_MS>",
    "<TIMEUNIT_D>",
    "\"ID\"",
    "\"TIMESTAMP\"",
    "\"BOOLEAN\"",
    "\"INTEGER\"",
    "\"FLOAT\"",
    "\"STRING\"",
    "\"ANY\"",
    "\"AS\"",
    "\"NULL\"",
    "\"TRUE\"",
    "\"FALSE\"",
    "\"UNKNOWN\"",
    "<CONSTANT_INTEGER_10>",
    "<CONSTANT_INTEGER_16>",
    "<CONSTANT_FLOAT>",
    "\"\\\'\"",
    "\"\\\"\"",
    "<CONSTANT_SINGLE_QUOTED_STRING_VALUE>",
    "<CONSTANT_DOUBLE_QUOTED_STRING_VALUE>",
    "\"\\\'\"",
    "\"\\\"\"",
    "<DIGIT>",
    "<LITERAL>",
    "\"_\"",
    "<HEXADECIMAL>",
    "<IDENTIFIER>",
    "<METHOD>",
    "<METHOD_PACKAGE>",
    "\".\"",
    "\"(\"",
    "\")\"",
  };

}
